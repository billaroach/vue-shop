1. подключили Vuex
2. создали store (хранилище), в котором есть состояния (state), мутации (mutations), действия (actions) и геттеры (getters)
3. в состоянии создали новый массив products (пустой)
4. далее мы с помощью действия GET_PRODUCTS_FROM_API(асинхронный метод) вызываем axios-запрос с методом GET по определенному URL (https запрос); 
	первым аргументом указываем URL, по которому стучимся (URL получаем, вызвав в консоли команду json-server --watch db.json); т.к. axios это промис, значит дальше идет then
5. GET_PRODUCTS_FROM_API можем вызывать из компонента
6. конструкцией commit вызываем мутацию (в GET_PRODUCTS_FROM_API), вторым аргументом (payload, нагрузка) прокидываем полученный products 
7. создаем мутацию с идентичным названием, первым аргументом ссылаемся на state, который объявили сами; второй аргумент - products, который мы получили
8. просто заполняем наш созданный массив products из state данными из полученного products 
9. все данные получены
10. как теперь получить products в компоненте v-catalog?
11. чтобы получить данные в наш компонент (чтобы из нашего компонента вызвать метод получения этих данных), 
	мы должны в момент, когда компонент отрендерится (появится на странице), вызвать метод GET_PRODUCTS_FROM_API, получить данные из URL, 
	вызвать мутацию, заполнить products, и получить данные в наш компонент v-catalog
12. импортируем {mapActions} из vuex
13. создаем метод ...mapActions, добавляем название действия, чтобы к этому действию можно было обращаться через this
14. создаем lifehook mounted, в нем вызываем вышеуказанный метод
15. импортируем mapGetters, чтобы укоротить обращение к данным (вместо this.$store.state.products станет PRODUCTS); 
	то есть обращаемся не к данным из состояния, а к геттеру, который поэтапно получает данные в файле store.js
